#include <iostream>
#include <vector>

class Conditions {
    public:
        Conditions (std::vector<unsigned>  &weights, std::vector<unsigned> &costs);
        std::vector<unsigned> weights;
        std::vector<unsigned> costs; 
                                                                                        
};



Conditions::Conditions(std::vector<unsigned> &weights, std::vector<unsigned> &costs) {
    this->weights = weights;
    this->costs = costs;
};

class Knapsack {
    public:
        Knapsack(const unsigned capacity, unsigned n_items);
        const unsigned capacity;
        bool put_item (unsigned item_index, unsigned item_weight, unsigned item_cost);
        bool take_out (unsigned item_index, unsigned item_weight, unsigned item_cost);
        unsigned get_current_weight();
        unsigned get_current_value();
        std::vector<bool> items;
    private:
        unsigned current_value;
        unsigned current_weight;
};

Knapsack::Knapsack(const unsigned capacity, unsigned n_items) 
: items(n_items, 0),
  current_weight(0),
  capacity(capacity)
{}

unsigned Knapsack::get_current_weight(){
    return current_weight;
}

unsigned Knapsack::get_current_value(){
    return current_value;
}

bool Knapsack::put_item(unsigned item_index, unsigned item_weight, unsigned item_cost) {
    if (current_weight + item_weight < capacity) {
        current_value += item_cost;
        current_weight += item_weight;
        items[item_index] = 1;
        return 1;
    } else 
        return 0;
    
}

bool Knapsack::take_out(unsigned item_index, unsigned item_weight, unsigned item_cost) {
    if (items[item_index] == 1) {
        current_weight -= item_weight;
        current_value -= item_cost;
        items[item_index] = 0;
        return 1;
    } else 
        return 0;
};


unsigned optimal (std::vector<bool> &in_or_not, int i, std::vector<unsigned> costs){
    unsigned sum = 0;
    for (int j = 0; j <= i; j++)  { if(in_or_not[j]) sum += costs[j];}
    for (int j = i++; j < in_or_not.size(); j++) sum += costs[j];
    
    return sum;
}

int last_one_to_zero(std::vector<bool> &vec, unsigned i) {
    int j = i;
    while (j >=0 && vec[j] == false) {
        j--;
    }
    return j;
}

void dfs (Conditions &conditions, unsigned i, Knapsack &knapsack, bool &flag1, bool &flag2, unsigned &max) {
    if (flag1) return;
    unsigned opt_value = optimal((knapsack.items), i, conditions.costs);
    if(optimal(knapsack.items, i, conditions.costs) < max) {
        for (int l = 0; l < n; l++) {
        std::cout << knapsack.items[l];
        }
        i = last_one_to_zero((knapsack.items), i);
        if (i == -1) { 
            flag2 = 1; return;
            }
        knapsack.take_out(i, conditions.weights[i], conditions.costs[i]);
        flag1 = 1;
    }

    if(knapsack.get_current_value() == opt_value) {
        if(knapsack.get_current_value() > max) max = knapsack.get_current_value();
        i = last_one_to_zero((knapsack.items), i);
        if (i == -1) { 
            flag2 = 1; return;
            }
        knapsack.take_out(i, conditions.weights[i], conditions.costs[i]);
        flag1 = 1;
    }

    if (!flag1 && knapsack.put_item(i, conditions.weights[i], conditions.costs[i])) {
        knapsack.put_item(i, conditions.weights[i], conditions.costs[i]);
        dfs(conditions, i++, knapsack, flag1, flag2, max);
    }

    else {
        flag1 = 0;
        dfs(conditions, i++, knapsack, flag1, flag2, max);
    }

}


int main() {

    unsigned i, n, capacity, max = 0, j = 0;
    bool flag1 = 0; 
    bool flag2 = 0;
    std::cin >> n >> capacity;
    std::vector
    <unsigned> weights(n);
    std::vector
    <unsigned> costs(n);
    for (i = 0; i < n; i++) {
        std::cin >> weights[i] >> costs[i];
    }
    Knapsack knapsack(capacity, n);
    Conditions conditions(weights, costs);
    dfs(conditions, j, knapsack, flag1, flag2, max);
    for (i = 0; i < n; i++) {
        std::cout << knapsack.items[i];
    }
    return 0;
}